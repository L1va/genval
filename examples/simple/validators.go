//This file was automatically generated by the genval generator v1.0
//Please don't modify it manually. Edit your entity tags and then
//run go generate

package simple

import (
	"fmt"

	"unicode/utf8"
)

type validatable interface {
	Validate() error
}

func validate(i interface{}) error {
	if v, ok := i.(validatable); ok {
		return v.Validate()
	}
	return nil
}

// Validate validates Dog
func (r Dog) Validate() error {
	if utf8.RuneCountInString(r.Name) < 1 {
		return fmt.Errorf("field Name is shorter than 1 chars")
	}
	if utf8.RuneCountInString(r.Name) > 64 {
		return fmt.Errorf("field Name is longer than 64 chars")
	}
	return nil
}

// Validate validates User
func (r User) Validate() error {
	if utf8.RuneCountInString(r.Name) < 3 {
		return fmt.Errorf("field Name is shorter than 3 chars")
	}
	if utf8.RuneCountInString(r.Name) > 64 {
		return fmt.Errorf("field Name is longer than 64 chars")
	}
	if r.Age < 18 {
		return fmt.Errorf("field Age is less than 18 ")
	}
	if r.Age > 95 {
		return fmt.Errorf("field Age is more than 95 ")
	}
	if err := r.Dog.Validate(); err != nil {
		return fmt.Errorf("Dog is not valid: %v", err)
	}
	if len(r.Emails) < 1 {
		return fmt.Errorf("map Emails has less items than 1 ")
	}
	for k, v := range r.Emails {
		_ = k
		_ = v
		if k > 3 {
			return fmt.Errorf("field k is more than 3 ")
		}
		if utf8.RuneCountInString(v) < 5 {
			return fmt.Errorf("field v is shorter than 5 chars")
		}
	}
	return nil
}
