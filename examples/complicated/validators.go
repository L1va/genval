//This file was automatically generated by the genval generator v1.5
//Please don't modify it manually. Edit your entity tags and then
//run go generate

package complicated

import (
	"fmt"

	"github.com/gojuno/genval/errlist"

	"unicode/utf8"
)

type validatable interface {
	Validate() error
}

func validate(i interface{}) error {
	if v, ok := i.(validatable); ok {
		return v.Validate()
	}
	return nil
}

// Validate validates AliasOnDogsMapAlias
func (r AliasOnDogsMapAlias) Validate() error {
	if err := DogsMapAlias(r).Validate(); err != nil {
		return fmt.Errorf("%s %v", "r", err)
	}
	return nil
}

// Validate validates Dog
func (r Dog) Validate() error {
	var errs errlist.List
	if utf8.RuneCountInString(string(r.Name)) < 1 {
		errs.AddFieldf("Name", "shorter than 1 chars")
	}
	if utf8.RuneCountInString(string(r.Name)) > 64 {
		errs.AddFieldf("Name", "longer than 64 chars")
	}
	return errs.ErrorOrNil()
}

// Validate validates DogsMapAlias
func (r DogsMapAlias) Validate() error {
	var errs errlist.List
	for kr, vr := range r {
		_ = kr
		_ = vr
		if err := vr.Validate(); err != nil {
			errs.AddField(fmt.Sprintf("r"+".%v", vr), err)
		}
	}
	return errs.ErrorOrNil()
}

// Validate validates Status
func (r Status) Validate() error {
	switch r {
	case StatusCreated:
	case StatusPending:
	case StatusActive:
	case StatusFailed:
	default:
		return fmt.Errorf("invalid value for enum Status: %v", r)
	}
	return nil
}

// Validate validates User
func (r User) Validate() error {
	var errs errlist.List
	if utf8.RuneCountInString(string(r.Name)) < 3 {
		errs.AddFieldf("Name", "shorter than 3 chars")
	}
	if utf8.RuneCountInString(string(r.Name)) > 64 {
		errs.AddFieldf("Name", "longer than 64 chars")
	}
	if r.LastName != nil {
		if utf8.RuneCountInString(string(*r.LastName)) < 1 {
			errs.AddFieldf("LastName", "shorter than 1 chars")
		}
		if utf8.RuneCountInString(string(*r.LastName)) > 5 {
			errs.AddFieldf("LastName", "longer than 5 chars")
		}
	}
	if r.Age < 18 {
		errs.AddFieldf("Age", "less than 18")
	}
	if r.Age > 105 {
		errs.AddFieldf("Age", "more than 105")
	}
	if r.ChildrenCount == nil {
		errs.AddFieldf("ChildrenCount", "cannot be nil")
	} else {
		if *r.ChildrenCount < 0 {
			errs.AddFieldf("ChildrenCount", "less than 0")
		}
		if *r.ChildrenCount > 15 {
			errs.AddFieldf("ChildrenCount", "more than 15")
		}
	}
	if r.Float < -4.22 {
		errs.AddFieldf("Float", "less than -4.22")
	}
	if r.Float > 42.55 {
		errs.AddFieldf("Float", "more than 42.55")
	}
	if err := r.Dog.Validate(); err != nil {
		errs.AddField("Dog", err)
	}
	if r.DogPointer != nil {
		if err := r.DogPointer.Validate(); err != nil {
			errs.AddField("DogPointer", err)
		}
	}
	if err := r.DogOptional.ValidateOptional(); err != nil {
		errs.AddField("DogOptional", err)
	}
	if len(r.Urls) < 1 {
		errs.AddFieldf("Urls", "less items than 1")
	}
	for kUrls, vUrls := range r.Urls {
		_ = kUrls
		_ = vUrls
		if utf8.RuneCountInString(string(vUrls)) > 256 {
			errs.AddFieldf(fmt.Sprintf("Urls"+".%v", kUrls), "longer than 256 chars")
		}
	}
	if len(r.Dogs) < 1 {
		errs.AddFieldf("Dogs", "less items than 1")
	}
	for kDogs, vDogs := range r.Dogs {
		_ = kDogs
		_ = vDogs
		if vDogs != nil {
			if err := vDogs.Validate(); err != nil {
				errs.AddField(fmt.Sprintf("Dogs"+".%v", kDogs), err)
			}
		}
	}
	if r.Test != nil {
		if len(*r.Test) < 1 {
			errs.AddFieldf("Test", "less items than 1")
		}
		for kTest, vTest := range *r.Test {
			_ = kTest
			_ = vTest
			if vTest < 4 {
				errs.AddFieldf(fmt.Sprintf("Test"+".%v", kTest), "less than 4")
			}
		}
	}
	if err := validateSome(r.Some); err != nil {
		errs.AddField("Some", err)
	}
	if len(r.SomeArray) < 1 {
		errs.AddFieldf("SomeArray", "less items than 1")
	}
	for kSomeArray, vSomeArray := range r.SomeArray {
		_ = kSomeArray
		_ = vSomeArray
		if err := validateSome(vSomeArray); err != nil {
			errs.AddField(fmt.Sprintf("SomeArray"+".%v", kSomeArray), err)
		}
	}
	if len(r.Dict) < 2 {
		errs.AddFieldf("Dict", "less items than 2")
	}
	for kDict, vDict := range r.Dict {
		_ = kDict
		_ = vDict
		if utf8.RuneCountInString(string(kDict)) > 64 {
			errs.AddFieldf(fmt.Sprintf("Dict"+".%v", kDict), "longer than 64 chars")
		}
		if vDict < -35 {
			errs.AddFieldf(fmt.Sprintf("Dict"+".%v", vDict), "less than -35")
		}
		if vDict > 34 {
			errs.AddFieldf(fmt.Sprintf("Dict"+".%v", vDict), "more than 34")
		}
	}
	for kDictDogs, vDictDogs := range r.DictDogs {
		_ = kDictDogs
		_ = vDictDogs
		if err := vDictDogs.ValidateOptional(); err != nil {
			errs.AddField(fmt.Sprintf("DictDogs"+".%v", vDictDogs), err)
		}
		if err := validateMaxDogName(vDictDogs); err != nil {
			errs.AddField(fmt.Sprintf("DictDogs"+".%v", vDictDogs), err)
		}
	}
	if err := r.Alias.Validate(); err != nil {
		errs.AddField("Alias", err)
	}
	if err := r.AliasOnAlias.Validate(); err != nil {
		errs.AddField("AliasOnAlias", err)
	}
	if err := r.AliasOnAliasWithCustomValidate.ValidateAlias(); err != nil {
		errs.AddField("AliasOnAliasWithCustomValidate", err)
	}
	for kMapOfMap, vMapOfMap := range r.MapOfMap {
		_ = kMapOfMap
		_ = vMapOfMap
		if len(vMapOfMap) < 1 {
			errs.AddFieldf(fmt.Sprintf("MapOfMap"+".%v", vMapOfMap), "less items than 1")
		}
		for kvMapOfMap, vvMapOfMap := range vMapOfMap {
			_ = kvMapOfMap
			_ = vvMapOfMap
			if utf8.RuneCountInString(string(vvMapOfMap)) < 3 {
				errs.AddFieldf(fmt.Sprintf(fmt.Sprintf("MapOfMap"+".%v", vMapOfMap)+".%v", vvMapOfMap), "shorter than 3 chars")
			}
		}
	}
	for kMapOfSlice, vMapOfSlice := range r.MapOfSlice {
		_ = kMapOfSlice
		_ = vMapOfSlice
		if len(vMapOfSlice) < 1 {
			errs.AddFieldf(fmt.Sprintf("MapOfSlice"+".%v", vMapOfSlice), "less items than 1")
		}
		for kvMapOfSlice, vvMapOfSlice := range vMapOfSlice {
			_ = kvMapOfSlice
			_ = vvMapOfSlice
			if utf8.RuneCountInString(string(vvMapOfSlice)) > 256 {
				errs.AddFieldf(fmt.Sprintf(fmt.Sprintf("MapOfSlice"+".%v", vMapOfSlice)+".%v", kvMapOfSlice), "longer than 256 chars")
			}
		}
	}
	if len(r.SliceOfSliceOfSlice) < 1 {
		errs.AddFieldf("SliceOfSliceOfSlice", "less items than 1")
	}
	for kSliceOfSliceOfSlice, vSliceOfSliceOfSlice := range r.SliceOfSliceOfSlice {
		_ = kSliceOfSliceOfSlice
		_ = vSliceOfSliceOfSlice
		if len(vSliceOfSliceOfSlice) < 1 {
			errs.AddFieldf(fmt.Sprintf("SliceOfSliceOfSlice"+".%v", kSliceOfSliceOfSlice), "less items than 1")
		}
		for kvSliceOfSliceOfSlice, vvSliceOfSliceOfSlice := range vSliceOfSliceOfSlice {
			_ = kvSliceOfSliceOfSlice
			_ = vvSliceOfSliceOfSlice
			if len(vvSliceOfSliceOfSlice) < 1 {
				errs.AddFieldf(fmt.Sprintf(fmt.Sprintf("SliceOfSliceOfSlice"+".%v", kSliceOfSliceOfSlice)+".%v", kvSliceOfSliceOfSlice), "less items than 1")
			}
			for kvvSliceOfSliceOfSlice, vvvSliceOfSliceOfSlice := range vvSliceOfSliceOfSlice {
				_ = kvvSliceOfSliceOfSlice
				_ = vvvSliceOfSliceOfSlice
				if utf8.RuneCountInString(string(vvvSliceOfSliceOfSlice)) > 256 {
					errs.AddFieldf(fmt.Sprintf(fmt.Sprintf(fmt.Sprintf("SliceOfSliceOfSlice"+".%v", kSliceOfSliceOfSlice)+".%v", kvSliceOfSliceOfSlice)+".%v", kvvSliceOfSliceOfSlice), "longer than 256 chars")
				}
			}
		}
	}
	return errs.ErrorOrNil()
}
