//This file was automatically generated by the genval generator v1.4
//Please don't modify it manually. Edit your entity tags and then
//run go generate

package aliases

import (
	"fmt"

	"github.com/gojuno/genval/errlist"

	"unicode/utf8"
)

type validatable interface {
	Validate() error
}

func validate(i interface{}) error {
	if v, ok := i.(validatable); ok {
		return v.Validate()
	}
	return nil
}

// Validate validates FloatType
func (r FloatType) Validate() error {
	return nil
}

// Validate validates IntType
func (r IntType) Validate() error {
	return nil
}

// Validate validates MapType
func (r MapType) Validate() error {
	var errs errlist.List
	return errs.ErrorOrNil()
}

// Validate validates User
func (r User) Validate() error {
	var errs errlist.List
	if utf8.RuneCountInString(string(r.FirstName)) < 2 {
		errs.AddFieldf("FirstName", "shorter than 2 chars")
	}
	if utf8.RuneCountInString(string(r.FirstName)) > 15 {
		errs.AddFieldf("FirstName", "longer than 15 chars")
	}
	if utf8.RuneCountInString(string(r.LastName)) < 1 {
		errs.AddFieldf("LastName", "shorter than 1 chars")
	}
	if utf8.RuneCountInString(string(r.LastName)) > 15 {
		errs.AddFieldf("LastName", "longer than 15 chars")
	}
	if r.FamilyMembers < 1 {
		errs.AddFieldf("FamilyMembers", "less than 1")
	}
	if r.FamilyMembers > 100 {
		errs.AddFieldf("FamilyMembers", "more than 100")
	}
	if r.SomeFloat < 2.55 {
		errs.AddFieldf("SomeFloat", "less than 2.55")
	}
	if r.SomeFloat > 99.99 {
		errs.AddFieldf("SomeFloat", "more than 99.99")
	}
	if len(r.SomeMap) < 2 {
		errs.AddFieldf("SomeMap", "less items than 2")
	}
	for SomeMapKey, SomeMapValue := range r.SomeMap {
		_ = SomeMapKey
		_ = SomeMapValue
		if utf8.RuneCountInString(string(SomeMapKey)) > 64 {
			errs.AddFieldf(fmt.Sprintf("SomeMap"+".%v", SomeMapKey), "longer than 64 chars")
		}
		if SomeMapValue < -35 {
			errs.AddFieldf(fmt.Sprintf("SomeMap"+".%v", SomeMapKey), "less than -35")
		}
		if SomeMapValue > 34 {
			errs.AddFieldf(fmt.Sprintf("SomeMap"+".%v", SomeMapKey), "more than 34")
		}
	}
	if r.SomePointer == nil {
		errs.AddFieldf("SomePointer", "cannot be nil")
	} else {
		if utf8.RuneCountInString(string(*r.SomePointer)) < 20 {
			errs.AddFieldf("SomePointer", "shorter than 20 chars")
		}
		if utf8.RuneCountInString(string(*r.SomePointer)) > 150 {
			errs.AddFieldf("SomePointer", "longer than 150 chars")
		}
	}
	return errs.ErrorOrNil()
}
