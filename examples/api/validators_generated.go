//This file was automatically generated by the genval generator
//Please don't modify it manually. Edit your entity tags and then
//run go generate

package api

import (
	"fmt"

	"unicode/utf8"
)

type Validatable interface {
	Validate() error
}

func callValidateIfValidatable(i interface{}) error {
	if v, ok := i.(Validatable); ok {
		if err := v.Validate(); err != nil {
			return err
		}
	}
	return nil
}

func (r Dog) validate() error {
	return nil
}

func (r Dog) Validate() error {
	return r.validate()
}

func (r User) validate() error {
	if utf8.RuneCountInString(r.Name) < 3 {
		return fmt.Errorf("field Name is less than 3 ")
	}
	if utf8.RuneCountInString(r.Name) > 64 {
		return fmt.Errorf("field Name is more than 64 ")
	}
	if r.LastName != nil {
		if utf8.RuneCountInString(*r.LastName) < 1 {
			return fmt.Errorf("field LastName is less than 1 ")
		}
		if utf8.RuneCountInString(*r.LastName) > 5 {
			return fmt.Errorf("field LastName is more than 5 ")
		}
	}
	if r.Age < 18 {
		return fmt.Errorf("field Age is less than 18 ")
	}
	if r.Age > 105 {
		return fmt.Errorf("field Age is more than 105 ")
	}
	if r.ChildrenCount == nil {
		return fmt.Errorf("field ChildrenCount is required, should not be nil")
	}
	if *r.ChildrenCount < 0 {
		return fmt.Errorf("field ChildrenCount is less than 0 ")
	}
	if *r.ChildrenCount > 15 {
		return fmt.Errorf("field ChildrenCount is more than 15 ")
	}
	if r.Float < -4.22 {
		return fmt.Errorf("field Float is less than -4.22 ")
	}
	if r.Float > 42.55 {
		return fmt.Errorf("field Float is more than 42.55 ")
	}
	if err := callValidateIfValidatable(r.Dog); err != nil {
		return err
	}
	if r.DogPointer == nil {
		return fmt.Errorf("field DogPointer is required, should not be nil")
	}
	if err := callValidateIfValidatable(*r.DogPointer); err != nil {
		return err
	}
	if err := r.DogOptional.ValidateOptional(); err != nil {
		return err
	}
	if len(r.Urls) < 1 {
		return fmt.Errorf("array Urls has less items than 1 ")
	}
	for _, x := range r.Urls {
		_ = x
		if utf8.RuneCountInString(x) < 5 {
			return fmt.Errorf("field x is less than 5 ")
		}
		if utf8.RuneCountInString(x) > 256 {
			return fmt.Errorf("field x is more than 256 ")
		}
	}
	if len(r.Cats) < 1 {
		return fmt.Errorf("array Cats has less items than 1 ")
	}
	for _, x := range r.Cats {
		_ = x
		if x != nil {
			if err := callValidateIfValidatable(*x); err != nil {
				return err
			}
		}
	}
	if r.Dogs != nil {
		if len(*r.Dogs) < 1 {
			return fmt.Errorf("array Dogs has less items than 1 ")
		}
		for _, x := range *r.Dogs {
			_ = x
			if x < 4 {
				return fmt.Errorf("field x is less than 4 ")
			}
		}
	}
	if err := validateSome(r.Some); err != nil {
		return err
	}
	if len(r.Dict) < 2 {
		return fmt.Errorf("map Dict has less items than 2 ")
	}
	for k, v := range r.Dict {
		_ = k
		_ = v
		if utf8.RuneCountInString(k) < 1 {
			return fmt.Errorf("field k is less than 1 ")
		}
		if utf8.RuneCountInString(k) > 64 {
			return fmt.Errorf("field k is more than 64 ")
		}
		if v < -35 {
			return fmt.Errorf("field v is less than -35 ")
		}
		if v > 34 {
			return fmt.Errorf("field v is more than 34 ")
		}
	}
	for k, v := range r.DictDogs {
		_ = k
		_ = v
		if utf8.RuneCountInString(k) < 1 {
			return fmt.Errorf("field k is less than 1 ")
		}
		if err := v.ValidateOptional(); err != nil {
			return err
		}
	}
	return nil
}

func (r User) Validate() error {
	return r.validate()
}
